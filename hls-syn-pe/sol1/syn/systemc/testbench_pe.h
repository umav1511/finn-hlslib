// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _testbench_pe_HH_
#define _testbench_pe_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "testbench_pe_mul_bkb.h"

namespace ap_rtl {

struct testbench_pe : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<8> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_in< sc_lv<4> > weights_V_V_dout;
    sc_in< sc_logic > weights_V_V_empty_n;
    sc_out< sc_logic > weights_V_V_read;
    sc_in< sc_lv<32> > reps;


    // Module declarations
    testbench_pe(sc_module_name name);
    SC_HAS_PROCESS(testbench_pe);

    ~testbench_pe();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    testbench_pe_mul_bkb<1,1,2,2,4>* testbench_pe_mul_bkb_U1;
    testbench_pe_mul_bkb<1,1,2,2,4>* testbench_pe_mul_bkb_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln356_reg_242;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln382_reg_251;
    sc_signal< sc_lv<1> > icmp_ln382_reg_251_pp0_iter1_reg;
    sc_signal< sc_logic > weights_V_V_blk_n;
    sc_signal< sc_lv<8> > res_V_reg_121;
    sc_signal< sc_lv<4> > sf_0_i_reg_133;
    sc_signal< sc_lv<1> > icmp_ln356_fu_144_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln356_reg_242_pp0_iter1_reg;
    sc_signal< sc_lv<4> > sf_fu_150_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln382_fu_156_p2;
    sc_signal< sc_lv<8> > tmp_V_fu_236_p2;
    sc_signal< sc_lv<8> > tmp_V_reg_255;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<8> > ap_phi_mux_res_V_phi_fu_125_p4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<2> > trunc_ln647_fu_162_p1;
    sc_signal< sc_lv<2> > trunc_ln647_1_fu_176_p1;
    sc_signal< sc_lv<4> > mul_ln1352_fu_188_p2;
    sc_signal< sc_lv<2> > p_Result_i_fu_166_p4;
    sc_signal< sc_lv<2> > arg_V_read_assign_1_fu_198_p4;
    sc_signal< sc_lv<4> > mul_ln1352_1_fu_216_p2;
    sc_signal< sc_lv<5> > sext_ln170_fu_194_p1;
    sc_signal< sc_lv<5> > sext_ln700_fu_222_p1;
    sc_signal< sc_lv<5> > add_ln700_fu_226_p2;
    sc_signal< sc_lv<8> > sext_ln700_1_fu_232_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln700_fu_226_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_res_V_phi_fu_125_p4();
    void thread_ap_ready();
    void thread_arg_V_read_assign_1_fu_198_p4();
    void thread_icmp_ln356_fu_144_p2();
    void thread_icmp_ln382_fu_156_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_Result_i_fu_166_p4();
    void thread_sext_ln170_fu_194_p1();
    void thread_sext_ln700_1_fu_232_p1();
    void thread_sext_ln700_fu_222_p1();
    void thread_sf_fu_150_p2();
    void thread_tmp_V_fu_236_p2();
    void thread_trunc_ln647_1_fu_176_p1();
    void thread_trunc_ln647_fu_162_p1();
    void thread_weights_V_V_blk_n();
    void thread_weights_V_V_read();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
