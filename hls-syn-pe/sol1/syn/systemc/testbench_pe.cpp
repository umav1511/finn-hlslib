// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "testbench_pe.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic testbench_pe::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic testbench_pe::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> testbench_pe::ap_ST_fsm_state1 = "1";
const sc_lv<3> testbench_pe::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> testbench_pe::ap_ST_fsm_state5 = "100";
const sc_lv<32> testbench_pe::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool testbench_pe::ap_const_boolean_1 = true;
const sc_lv<32> testbench_pe::ap_const_lv32_1 = "1";
const bool testbench_pe::ap_const_boolean_0 = false;
const sc_lv<1> testbench_pe::ap_const_lv1_0 = "0";
const sc_lv<1> testbench_pe::ap_const_lv1_1 = "1";
const sc_lv<8> testbench_pe::ap_const_lv8_0 = "00000000";
const sc_lv<4> testbench_pe::ap_const_lv4_0 = "0000";
const sc_lv<4> testbench_pe::ap_const_lv4_8 = "1000";
const sc_lv<4> testbench_pe::ap_const_lv4_1 = "1";
const sc_lv<4> testbench_pe::ap_const_lv4_7 = "111";
const sc_lv<32> testbench_pe::ap_const_lv32_2 = "10";
const sc_lv<32> testbench_pe::ap_const_lv32_3 = "11";

testbench_pe::testbench_pe(sc_module_name name) : sc_module(name), mVcdFile(0) {
    testbench_pe_mul_bkb_U1 = new testbench_pe_mul_bkb<1,1,2,2,4>("testbench_pe_mul_bkb_U1");
    testbench_pe_mul_bkb_U1->din0(trunc_ln647_1_fu_176_p1);
    testbench_pe_mul_bkb_U1->din1(trunc_ln647_fu_162_p1);
    testbench_pe_mul_bkb_U1->dout(mul_ln1352_fu_188_p2);
    testbench_pe_mul_bkb_U2 = new testbench_pe_mul_bkb<1,1,2,2,4>("testbench_pe_mul_bkb_U2");
    testbench_pe_mul_bkb_U2->din0(arg_V_read_assign_1_fu_198_p4);
    testbench_pe_mul_bkb_U2->din1(p_Result_i_fu_166_p4);
    testbench_pe_mul_bkb_U2->dout(mul_ln1352_1_fu_216_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_226_p2);
    sensitive << ( sext_ln170_fu_194_p1 );
    sensitive << ( sext_ln700_fu_222_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( out_V_V_full_n );
    sensitive << ( weights_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln356_reg_242 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( out_V_V_full_n );
    sensitive << ( weights_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln356_reg_242 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( out_V_V_full_n );
    sensitive << ( weights_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln356_reg_242 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( weights_V_V_empty_n );
    sensitive << ( icmp_ln356_reg_242 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( out_V_V_full_n );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln356_fu_144_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_res_V_phi_fu_125_p4);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( res_V_reg_121 );
    sensitive << ( icmp_ln356_reg_242_pp0_iter1_reg );
    sensitive << ( tmp_V_reg_255 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_arg_V_read_assign_1_fu_198_p4);
    sensitive << ( in_V_V_dout );

    SC_METHOD(thread_icmp_ln356_fu_144_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( sf_0_i_reg_133 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln382_fu_156_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( sf_0_i_reg_133 );
    sensitive << ( icmp_ln356_fu_144_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln356_reg_242 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln356_reg_242 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_V_blk_n);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );
    sensitive << ( tmp_V_reg_255 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln382_reg_251_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_i_fu_166_p4);
    sensitive << ( weights_V_V_dout );

    SC_METHOD(thread_sext_ln170_fu_194_p1);
    sensitive << ( mul_ln1352_fu_188_p2 );

    SC_METHOD(thread_sext_ln700_1_fu_232_p1);
    sensitive << ( add_ln700_fu_226_p2 );

    SC_METHOD(thread_sext_ln700_fu_222_p1);
    sensitive << ( mul_ln1352_1_fu_216_p2 );

    SC_METHOD(thread_sf_fu_150_p2);
    sensitive << ( sf_0_i_reg_133 );

    SC_METHOD(thread_tmp_V_fu_236_p2);
    sensitive << ( ap_phi_mux_res_V_phi_fu_125_p4 );
    sensitive << ( sext_ln700_1_fu_232_p1 );

    SC_METHOD(thread_trunc_ln647_1_fu_176_p1);
    sensitive << ( in_V_V_dout );

    SC_METHOD(thread_trunc_ln647_fu_162_p1);
    sensitive << ( weights_V_V_dout );

    SC_METHOD(thread_weights_V_V_blk_n);
    sensitive << ( weights_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln356_reg_242 );

    SC_METHOD(thread_weights_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln356_reg_242 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln356_fu_144_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "testbench_pe_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
    sc_trace(mVcdFile, weights_V_V_dout, "(port)weights_V_V_dout");
    sc_trace(mVcdFile, weights_V_V_empty_n, "(port)weights_V_V_empty_n");
    sc_trace(mVcdFile, weights_V_V_read, "(port)weights_V_V_read");
    sc_trace(mVcdFile, reps, "(port)reps");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln356_reg_242, "icmp_ln356_reg_242");
    sc_trace(mVcdFile, out_V_V_blk_n, "out_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln382_reg_251, "icmp_ln382_reg_251");
    sc_trace(mVcdFile, icmp_ln382_reg_251_pp0_iter1_reg, "icmp_ln382_reg_251_pp0_iter1_reg");
    sc_trace(mVcdFile, weights_V_V_blk_n, "weights_V_V_blk_n");
    sc_trace(mVcdFile, res_V_reg_121, "res_V_reg_121");
    sc_trace(mVcdFile, sf_0_i_reg_133, "sf_0_i_reg_133");
    sc_trace(mVcdFile, icmp_ln356_fu_144_p2, "icmp_ln356_fu_144_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln356_reg_242_pp0_iter1_reg, "icmp_ln356_reg_242_pp0_iter1_reg");
    sc_trace(mVcdFile, sf_fu_150_p2, "sf_fu_150_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, icmp_ln382_fu_156_p2, "icmp_ln382_fu_156_p2");
    sc_trace(mVcdFile, tmp_V_fu_236_p2, "tmp_V_fu_236_p2");
    sc_trace(mVcdFile, tmp_V_reg_255, "tmp_V_reg_255");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_phi_mux_res_V_phi_fu_125_p4, "ap_phi_mux_res_V_phi_fu_125_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, trunc_ln647_fu_162_p1, "trunc_ln647_fu_162_p1");
    sc_trace(mVcdFile, trunc_ln647_1_fu_176_p1, "trunc_ln647_1_fu_176_p1");
    sc_trace(mVcdFile, mul_ln1352_fu_188_p2, "mul_ln1352_fu_188_p2");
    sc_trace(mVcdFile, p_Result_i_fu_166_p4, "p_Result_i_fu_166_p4");
    sc_trace(mVcdFile, arg_V_read_assign_1_fu_198_p4, "arg_V_read_assign_1_fu_198_p4");
    sc_trace(mVcdFile, mul_ln1352_1_fu_216_p2, "mul_ln1352_1_fu_216_p2");
    sc_trace(mVcdFile, sext_ln170_fu_194_p1, "sext_ln170_fu_194_p1");
    sc_trace(mVcdFile, sext_ln700_fu_222_p1, "sext_ln700_fu_222_p1");
    sc_trace(mVcdFile, add_ln700_fu_226_p2, "add_ln700_fu_226_p2");
    sc_trace(mVcdFile, sext_ln700_1_fu_232_p1, "sext_ln700_1_fu_232_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("testbench_pe.hdltvin.dat");
    mHdltvoutHandle.open("testbench_pe.hdltvout.dat");
}

testbench_pe::~testbench_pe() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete testbench_pe_mul_bkb_U1;
    delete testbench_pe_mul_bkb_U2;
}

void testbench_pe::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln356_reg_242_pp0_iter1_reg.read()))) {
        res_V_reg_121 = tmp_V_reg_255.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        res_V_reg_121 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln356_fu_144_p2.read()))) {
        sf_0_i_reg_133 = sf_fu_150_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sf_0_i_reg_133 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln356_reg_242 = icmp_ln356_fu_144_p2.read();
        icmp_ln356_reg_242_pp0_iter1_reg = icmp_ln356_reg_242.read();
        icmp_ln382_reg_251_pp0_iter1_reg = icmp_ln382_reg_251.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln356_fu_144_p2.read()))) {
        icmp_ln382_reg_251 = icmp_ln382_fu_156_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_255 = tmp_V_fu_236_p2.read();
    }
}

void testbench_pe::thread_add_ln700_fu_226_p2() {
    add_ln700_fu_226_p2 = (!sext_ln170_fu_194_p1.read().is_01() || !sext_ln700_fu_222_p1.read().is_01())? sc_lv<5>(): (sc_bigint<5>(sext_ln170_fu_194_p1.read()) + sc_bigint<5>(sext_ln700_fu_222_p1.read()));
}

void testbench_pe::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void testbench_pe::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void testbench_pe::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void testbench_pe::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void testbench_pe::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(icmp_ln382_reg_251_pp0_iter1_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read())));
}

void testbench_pe::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(icmp_ln382_reg_251_pp0_iter1_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read())));
}

void testbench_pe::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(icmp_ln382_reg_251_pp0_iter1_reg.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read())));
}

void testbench_pe::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void testbench_pe::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, weights_V_V_empty_n.read())));
}

void testbench_pe::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = (esl_seteq<1,1,1>(icmp_ln382_reg_251_pp0_iter1_reg.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()));
}

void testbench_pe::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln356_fu_144_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void testbench_pe::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void testbench_pe::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void testbench_pe::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void testbench_pe::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void testbench_pe::thread_ap_phi_mux_res_V_phi_fu_125_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln356_reg_242_pp0_iter1_reg.read()))) {
        ap_phi_mux_res_V_phi_fu_125_p4 = tmp_V_reg_255.read();
    } else {
        ap_phi_mux_res_V_phi_fu_125_p4 = res_V_reg_121.read();
    }
}

void testbench_pe::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void testbench_pe::thread_arg_V_read_assign_1_fu_198_p4() {
    arg_V_read_assign_1_fu_198_p4 = in_V_V_dout.read().range(3, 2);
}

void testbench_pe::thread_icmp_ln356_fu_144_p2() {
    icmp_ln356_fu_144_p2 = (!sf_0_i_reg_133.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(sf_0_i_reg_133.read() == ap_const_lv4_8);
}

void testbench_pe::thread_icmp_ln382_fu_156_p2() {
    icmp_ln382_fu_156_p2 = (!sf_0_i_reg_133.read().is_01() || !ap_const_lv4_7.is_01())? sc_lv<1>(): sc_lv<1>(sf_0_i_reg_133.read() == ap_const_lv4_7);
}

void testbench_pe::thread_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0))) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void testbench_pe::thread_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void testbench_pe::thread_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln382_reg_251_pp0_iter1_reg.read(), ap_const_lv1_1))) {
        out_V_V_blk_n = out_V_V_full_n.read();
    } else {
        out_V_V_blk_n = ap_const_logic_1;
    }
}

void testbench_pe::thread_out_V_V_din() {
    out_V_V_din = tmp_V_reg_255.read();
}

void testbench_pe::thread_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(icmp_ln382_reg_251_pp0_iter1_reg.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_V_write = ap_const_logic_1;
    } else {
        out_V_V_write = ap_const_logic_0;
    }
}

void testbench_pe::thread_p_Result_i_fu_166_p4() {
    p_Result_i_fu_166_p4 = weights_V_V_dout.read().range(3, 2);
}

void testbench_pe::thread_sext_ln170_fu_194_p1() {
    sext_ln170_fu_194_p1 = esl_sext<5,4>(mul_ln1352_fu_188_p2.read());
}

void testbench_pe::thread_sext_ln700_1_fu_232_p1() {
    sext_ln700_1_fu_232_p1 = esl_sext<8,5>(add_ln700_fu_226_p2.read());
}

void testbench_pe::thread_sext_ln700_fu_222_p1() {
    sext_ln700_fu_222_p1 = esl_sext<5,4>(mul_ln1352_1_fu_216_p2.read());
}

void testbench_pe::thread_sf_fu_150_p2() {
    sf_fu_150_p2 = (!sf_0_i_reg_133.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(sf_0_i_reg_133.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void testbench_pe::thread_tmp_V_fu_236_p2() {
    tmp_V_fu_236_p2 = (!sext_ln700_1_fu_232_p1.read().is_01() || !ap_phi_mux_res_V_phi_fu_125_p4.read().is_01())? sc_lv<8>(): (sc_bigint<8>(sext_ln700_1_fu_232_p1.read()) + sc_biguint<8>(ap_phi_mux_res_V_phi_fu_125_p4.read()));
}

void testbench_pe::thread_trunc_ln647_1_fu_176_p1() {
    trunc_ln647_1_fu_176_p1 = in_V_V_dout.read().range(2-1, 0);
}

void testbench_pe::thread_trunc_ln647_fu_162_p1() {
    trunc_ln647_fu_162_p1 = weights_V_V_dout.read().range(2-1, 0);
}

void testbench_pe::thread_weights_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0))) {
        weights_V_V_blk_n = weights_V_V_empty_n.read();
    } else {
        weights_V_V_blk_n = ap_const_logic_1;
    }
}

void testbench_pe::thread_weights_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln356_reg_242.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        weights_V_V_read = ap_const_logic_1;
    } else {
        weights_V_V_read = ap_const_logic_0;
    }
}

void testbench_pe::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln356_fu_144_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln356_fu_144_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void testbench_pe::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_V_dout\" :  \"" << in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_V_empty_n\" :  \"" << in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_V_V_read\" :  \"" << in_V_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_V_din\" :  \"" << out_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_V_full_n\" :  \"" << out_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_V_write\" :  \"" << out_V_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_V_V_dout\" :  \"" << weights_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_V_V_empty_n\" :  \"" << weights_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_V_V_read\" :  \"" << weights_V_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"reps\" :  \"" << reps.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

